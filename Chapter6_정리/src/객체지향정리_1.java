/*
 * class : 한개, 한사람에 대한 설계
 * 		=> new를 이용해 여러개 저장 후 사용
 * 1. 변수
 * 		인스턴스, static 구분
 * 					-------- 메뉴, 로고, 사이트명
 * 2. 메소드
 * 		리턴명 / 매개변수
 * 		----	------ => 사용자 전송, 상세보기(영화번호,게시물번호)
 * 		화면출력(배열, 클래스) 배열 : 목록출력 
 * 						클래스 : 상세보기
 * 		기본형 => 로그인 여부, 갯수, 페이지 
 * 
 * 		오버로딩 : 한개의 메소드명으로 여러개의 기능을 만들어서 처리 (한개의 클래스에서 사용 가능)
 * 		오버라이딩 : 기존에 있는 메소드를 변경 ( 상속 필요 )
 * 		
 * 		메소드 형식
 * 			[접근지정어][옵션] 리턴형 메소드명(매개변수)
 * 					 static : 공통으로 사용되는 메소드, 인스턴스변수를 이용하지 않는 경우
 * 					 final : 수정이 없는 경우, 고정
 * 					 생략 : 인스턴스 (new의 갯수만큼 저장)
 * 		메소드 매개변수 종류
 * 			한개, 여러개, 없는경우
 * 			------ 3개이상일 경우 배열,클래스 사용 
 * 			------ 회원정보, 글쓰기, 수정, 예약 => 클래스
 * 			------ 갯수가 명확하지 않은 경우 ==> 가변 매개변수 (...) 활용
 * 		메소드 리턴형 종류
 * 			출력할 내용이 있는 경우 : 목록 = 배열
 * 			Recipe[] recipeListData();
 * 								 상세보기 = 클래스
 * 			Recipe recipeDetailData(int no)
 * 								 홈페이지 = 기본형
 * 			int recipeTotlaPage();
 * 
 * 		오버로딩 : 
 * 			같은 메소드명으로 새로운 기능을 추가할 때 사용
 * 			=> 같은 클래스내부에서 사용가능
 * 			=> 같은 메소드명
 * 			=> 매개변수의 갯수, 데이터타입이 달라야함
 * 			=> 리턴형은 관계없음 xxxxx
 * 			----------------------------- 생성자에서 가장 많이 사용함
 */
public class 객체지향정리_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
