package com.sist.exception2;
/*
 * 1. 프로그래머 실수
 * 2. 사용자의 실수(입력값) ==> 유효성 검사
 * -----------------------------------
 * 3. 오작동 / 비정상 종료
 * ---------------------------에러 / 오류
 * 
 * 예외처리 : 소스상에 수정이 가능한 에러
 *          예) 파일명이 틀리다, IP가 틀리다 ....
 *   => 컴파일에러             /        실행시 에러
 *   CheckException               UnCheckException
 *  컴파일러가 확인(반드시 예외처리)        예외처리 선택
 *  
 *  1. 에러를 사전에 방지하는 프로그램
 *  2. 정상적으로 수행이 가능한 견고한 프로그램을 만든다
 *  
 *  프로그램은
 *   1. 가독성 : 쉽게 알아볼 수 있어 (유지보수)가 쉬워야한다
 *             1) 구조적인 프로그램 : 메소드(기능별로 분류)
 *             2) 재사용
 *             3) 수정, 추가
 *             -------------------------- => 객체지향
 *   2. 최적화 : 실행속도가 빨라야한다
 *   3. 견고성 : 에러에 대응할 수 있어야한다
 *   
 *   직접처리 (예외복구) 
 *    try
 *    {
 *      정상적으로 실행되는 문장(오류가 발생할 수도 있다)
 *    }catch
 *    {
 *      실수한 부분을 처리
 *      catch 여러개 사용 가능 (순서가 존재한다 => 계층구조)
 *    }finally
 *    {
 *      필수적으로 닫기(자원 반환)
 *    }
 *    
 *    간접처리 (예외회피)
 *      throws => 예상되는 예외를 선언한다
 *                  ------------------- 예측이 가능하기 때문에 나중에 사용시 대처하기 쉽다
 *                  사용자 정의는 빈도수가 거의 없다.
 *      public void aaa() throws Exception
 *      {
 *         
 *      }
 *   
 *    임의발생 : 고의로 발생 ==> 테스팅
 *       throw new 예외처리생성자();
 *    
 *    사용자 정의
 *       class My extends Exception
 *       {
 *       }
 *       사용자 정의 => 지원하지 않는 것을 만든다
 *   
 *   
 */
public class 예외처리정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
