/*
 * 메소드 : 특정 작업을 하기 위한 명령문의 집합
 * 			메소드 vs 함수=> (독립적으로 생성) => 자바스크립트, C언어 ==> 기능은 같다
 * 			---- 클래스 종속(클래스 내부에서 생성) => 자바는 무조건 클래스 내부에서 생성
 * 			특정 작업(한가지 기능을 수행)
 * 				-------- 재사용성을 늘릴 수 있다
 * 	1) 메소드를 사용하는 목적
 * 		= 반복되는 기능을 제거
 * 		= 코드관리가 쉽다 (기능별로 나눠서 처리) ==> 문장 단락을 나눠서 처리 (유지보수)
 * 		= 소스가 간결해진다 (중복코드 제거)
 * 		= 다른 클래스와 연결
 * 		= 재사용을 높인다
 * 	2) 메소드의 종류
 * 		= 공통 메소드 : 자동으로 메모리에 저장 = static
 * 		= 인스턴스 메소드 : 메모리마다 따로 저장되는 메소드
 * 		= 추상 메소드
 * 	3) 메소드를 만드는 형식
 * 		1.리턴형 2.메소드명(3.매개변수)
 * 		{
 * 			처리 문장
 * 			return 값;
 		}
 * 	4) 메소드의 구성요소
 * 		1. 리턴형		: 사용자 요청 ==> 처리 ==> 결과값을 사용자에게 리턴
 * 						==> 리턴형 한개만 사용 가능
 * 						int 메소드명(매개변수){} ... 
 * 						double 메소드명() 
 * 						------------------------- Call By Value
 * 						Movie 메소드명
 * 						int[] 메소드명
 * 						------------------------- 사용하지 않을 수 있다 (리턴형 => 매개변수) Call By Reference
 * 					 결과값이 없는 경우 ==> void(메소드 자체에서 처리)
 * 		2. 메소드명	: 식별자(변수)
 * 					  알파벳,한글(대소문자 구분)
 * 					  숫자 사용 가능(앞에 사용 불가)
 * 					  키워드 사용 불가
 * 					  특수문자 사용 가능(_, $)
 * 					  길이는 제한이 없다
 * 					  소문자로 시작
 * 					  파일이름을 가지고 온다 : getFileName()
 * 										 저장을 한다 : setXxx()
 * 										 가지고 온다 : getXxx()
 * 										 존재 여부 확인(boolean) : isLogin()
 * 					  단어가 두개 이상일때 연결된 첫자는 대문자 or 언더바
 * 		3. 매개변수	: 사용자가 요청한 값
 * 					  웹=> 입력, 클릭<a>,<button>
 * 					  ** 사용자로부터 어떤 값을 받을지, 어떤 결과를 보내줄지
 * 					  매개변수가 없는 경우도 있다
 * 		4. 처리문장	: 연산처리(연산자), 제어문
 * 					  -------------------
 * 					  오라클, 파일찾기
 * 		5. 결과값		: 메소드 안에 "return 값"
 * 					  결과값이 없는 경우 : void ==> return 생략가능(컴파일러가 자동 첨부)
 * 					  return의 위치는 메소드안에만 존재하면 된다
 * 					  return은 메소드 종료시에 사용(break와 동일)
 * 		6. 메소드 => 생각
 * 			1. 동작 과정(행위)
 * 			2. 화면에 출력된 내용	: 리턴형
 * 			3. 사용자에게 유도		: 매개변수
 * 	
 */
public class 메소드정의_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
